i <- current_page - 1
class_number <- extract_class_from_filename(selected_images[i])
image <- image_read(selected_images[i])
tagList(
h4("AI Prediction: ", class_number),
p("Do you agree? Choose the city and highlight the area most important for your decision."),
div(class = "select-input",
selectInput(paste0("class_", i), "City Selection:",
choices = c("", "Tel Aviv", "Jerusalem", "Hamburg", "Berlin"))
),
plotOutput(paste0("imagePlot", i), click = paste0("image_click_", i), height = "500px"),
div(style = "display: flex; gap: 10px; justify-content: center;",
actionButton(paste0("clear_", i), "Clear Annotations", icon = icon("trash"), class = "btn-secondary"),
actionButton(paste0("end_polygon_", i), "Complete Polygon", icon = icon("check"), class = "btn-secondary"),
actionButton("next_page", "Next Image", icon = icon("arrow-right"), class = "btn-primary")
)
)
} else {
tagList(
h3("Thank you for completing the annotations!"),
p("All annotated images and coordinates have been saved to Nextcloud."),
actionButton("close_app", "Close", class = "btn-primary", style = "margin-top: 20px;")
)
}
})
observeEvent(page(), {
lapply(1:10, function(i) {
observeEvent(input[[paste0("image_click_", i)]], {
current_coords <- coords()
polygon_id_val <- polygon_id()
current_coords <- add_row(
current_coords,
x = input[[paste0("image_click_", i)]]$x,
y = input[[paste0("image_click_", i)]]$y,
polygon_id = polygon_id_val,
name = paste("polygon", i)
)
coords(current_coords)
})
output[[paste0("imagePlot", i)]] <- renderPlot({
img <- image_read(selected_images[i])
img_raster <- as.raster(img)
plot(img_raster)
all_polygons <- coords() %>% filter(name == paste("polygon", i))
unique_polygons <- unique(all_polygons$polygon_id)
for (poly_id in unique_polygons) {
polygon_coords <- all_polygons %>% filter(polygon_id == poly_id)
if (nrow(polygon_coords) > 2) {
polygon(polygon_coords$x, polygon_coords$y, border = "blue", col = rgb(0, 0, 1, alpha = 0.2))
}
}
})
observeEvent(input[[paste0("clear_", i)]], {
coords(coords() %>% filter(name != paste("polygon", i)))
})
observeEvent(input[[paste0("end_polygon_", i)]], {
polygon_id(polygon_id() + 1)
})
})
})
observeEvent(input$next_page, {
current_page <- page()
if (current_page >= 2 && current_page <= 11) {
i <- current_page - 1
selected_class <- input[[paste0("class_", i)]]
input_filename <- tools::file_path_sans_ext(basename(selected_images[i]))
class_AI <- extract_class_from_filename(selected_images[i])
annotation_missing <- selected_class == ""
polygon_coords <- coords() %>% filter(name == paste("polygon", i))
polygon_missing <- nrow(polygon_coords) < 3
if (annotation_missing && polygon_missing) {
showModal(modalDialog(
title = "Annotation Required",
"Please select a city from the dropdown menu and highlight a region in the picture before proceeding to the next page.",
easyClose = TRUE
))
} else if (annotation_missing) {
showModal(modalDialog(
title = "Dropdown Selection Required",
"Please select a city from the dropdown menu before proceeding to the next page.",
easyClose = TRUE
))
} else if (polygon_missing) {
showModal(modalDialog(
title = "Image Annotation Required",
"Please highlight a region in the picture before proceeding to the next page.",
easyClose = TRUE
))
} else {
# Zeige den Fortschrittsbalken beim Speichern
showModal(modalDialog(
title = "Saving, please wait...",
progressBar(id = "save_progress", value = 0, display_pct = TRUE),
footer = NULL,
easyClose = FALSE
))
# Simuliere den Speichervorgang
for (progress in seq(0, 100, by = 20)) {
Sys.sleep(0.2)
updateProgressBar(session, id = "save_progress", value = progress)
}
annotated_img_name <- paste0("annotated_", input_filename, "_", selected_class, ".jpg")
annotation_csv_name <- paste0("annotated_", input_filename, "_", selected_class, ".csv")
img <- image_read(selected_images[i])
img_height <- image_info(img)$height
annotation_data <- polygon_coords %>%
select(-name) %>%
mutate(
x = x,
y = img_height - y,
image_id = i,
class_selected = selected_class,
class_AI = class_AI
)
temp_csv <- tempfile(fileext = ".csv")
write_csv(annotation_data, path = temp_csv)
saveData(temp_csv, annotation_csv_name, csv_cloud_folder, username, password)
img_with_polygon <- image_draw(img)
unique_polygons <- unique(polygon_coords$polygon_id)
for (poly_id in unique_polygons) {
poly_coords <- polygon_coords %>% filter(polygon_id == poly_id)
polygon(poly_coords$x, img_height - poly_coords$y, border = "blue", col = rgb(0, 0, 1, alpha = 0.2))
}
dev.off()
temp_img <- tempfile(fileext = ".jpg")
image_write(img_with_polygon, path = temp_img)
saveData(temp_img, annotated_img_name, img_cloud_folder, username, password)
removeModal()  # Versteckt das Modal nach dem Speichern
page(current_page + 1)
}
} else {
page(current_page + 1)
}
})
}
# saveData-Funktion für Nextcloud
saveData <- function(file_path, file_name, cloud_folder, username, password) {
url <- file.path("https://cloudstore.uni-ulm.de/remote.php/dav/files", username, cloud_folder, file_name)
response <- httr::PUT(url, httr::authenticate(username, password), body = httr::upload_file(file_path))
if (response$status_code == 201) {
cat("Datei erfolgreich hochgeladen:", file_name, "\n")
} else {
cat("Fehler beim Hochladen der Datei", file_name, "- Statuscode:", response$status_code, "\n")
}
}
runApp()
runApp()
runApp()
setwd("~/#Institut of Business Analytics/user_study/userstudy")
sedwd()
runApp()
runApp()
runApp()
runApp()
shinyApp(ui = ui, server = server)
shiny::runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(httr)
# Definiere die URL und die Anmeldedaten
url <- "https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/test.txt"
benutzername <- "zbc57"
passwort <- "IBA2024Nein#"
# Lade die Datei hoch
response <- PUT(url, authenticate(benutzername, passwort), body = upload_file("C:/Users/hanna/OneDrive/Dokumente/test.txt"))
# Überprüfe, ob der Upload erfolgreich war
if (response$status_code == 201) {
cat("Datei erfolgreich hochgeladen!\n")
} else {
cat("Fehler beim Hochladen der Datei. Statuscode:", response$status_code, "\n")
}
library(httr)
# Definiere die URL und die Anmeldedaten
url <- "https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/test.txt"
benutzername <- "zbc57"
passwort <- "IBA2024Nein#"
# Lade die Datei hoch
response <- PUT(url, authenticate(benutzername, passwort), body = upload_file("C:/Users/hanna/OneDrive/Dokumente/test.txt"))
# Überprüfe, ob der Upload erfolgreich war
if (response$status_code == 201) {
cat("Datei erfolgreich hochgeladen!\n")
} else {
cat("Fehler beim Hochladen der Datei. Statuscode:", response$status_code, "\n")
}
library(httr)
# Definiere die URL und die Anmeldedaten
url <- "https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/test.txt"
benutzername <- "zbc57"
passwort <- "IBA2024Nein#"
# Lade die Datei hoch
response <- PUT(url, authenticate(benutzername, passwort), body = upload_file("C:/Users/hanna/OneDrive/Dokumente/test.txt"))
# Überprüfe, ob der Upload erfolgreich war
if (response$status_code == 201) {
cat("Datei erfolgreich hochgeladen!\n")
} else {
cat("Fehler beim Hochladen der Datei. Statuscode:", response$status_code, "\n")
}
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
#https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/
# saveData-Funktion für Nextcloud
saveData <- function(file_path, file_name, cloud_folder, username, password) {
# Nextcloud-Einstellungen
img_cloud_folder <- "annotation_result"
csv_cloud_folder <- "annotation_result"
username <- "zbc57"  # Benutzername für Nextcloud
password <- "IBA2024Nein#"  # Passwort für Nextcloud
url <- paste0("https://cloudstore.uni-ulm.de/remote.php/dav/files", username, cloud_folder, file_name)
print(url)
response <- httr::PUT(url, httr::authenticate(username, password), body = httr::upload_file(file_path))
if (response$status_code == 201) {
cat("Datei erfolgreich hochgeladen:", file_name, "\n")
} else {
cat("Fehler beim Hochladen der Datei", file_name, "- Statuscode:", response$status_code, "\n")
}
}
print(url)
cat("Datei erfolgreich hochgeladen:", file_name, "\n")
file_name
url <- paste0("https://cloudstore.uni-ulm.de/remote.php/dav/files", username, cloud_folder, file_name)
print(url)
#https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/
# saveData-Funktion für Nextcloud
saveData <- function(file_path, file_name, cloud_folder, username, password) {
# Nextcloud-Einstellungen
img_cloud_folder <- "annotation_result"
csv_cloud_folder <- "annotation_result"
username <- "zbc57"  # Benutzername für Nextcloud
password <- "IBA2024Nein#"  # Passwort für Nextcloud
url <- paste0("https://cloudstore.uni-ulm.de/remote.php/dav/files", username, cloud_folder, file_name)
print(url)
response <- httr::PUT(url, httr::authenticate(username, password), body = httr::upload_file(file_path))
if (response$status_code == 201) {
cat("Datei erfolgreich hochgeladen:", file_name, "\n")
} else {
cat("Fehler beim Hochladen der Datei", file_name, "- Statuscode:", response$status_code, "\n")
}
}
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='ibaulmuniversity',
token='7F5EE8B920E5B311B3229787C990EB18',
secret='lRHViTL78Xge4Ji7PY+uc+3G+c8JHY3SD9Dj4+el')
rsconnect::deployApp(appName = "userstudy")
rlang::last_trace()
rsconnect::deployApp(appName = "userstudy")
rsconnect::deployApp(appName = "userstudy")
rsconnect::deployApp(appName = "userstudy")
runApp('test.R')
runApp('test.R')
runApp('test.R')
shiny::runApp()
runApp()
library(readr)
runApp()
runApp()
runApp()
library(shiny)
library(magick)
library(shinyjs)
library(readr)
library(tidyverse)
library(shinyWidgets)  # For progress bar
source("helpers.R")
server <- function(input, output, session) {
shinyjs::useShinyjs()
# Nextcloud-Einstellungen
img_cloud_folder <- "annotation_result"
csv_cloud_folder <- "annotation_result"
username <- "zbc57"  # Benutzername für Nextcloud
password <- "IBA2024Nein#"  # Passwort für Nextcloud
img_dir <- "xai_image/"
all_images <- list.files(img_dir, pattern = "\\.png$", full.names = TRUE)
selected_images <- sample(all_images, 10)
extract_class_from_filename <- function(filename) {
parts <- strsplit(basename(filename), "_")[[1]]
class_name <- parts[length(parts)]
class_name <- gsub("\\.png", "", class_name)
return(class_name)
}
page <- reactiveVal(1)
coords <- reactiveVal(value = tibble(x = numeric(), y = numeric(), polygon_id = integer(), name = character()))
polygon_id <- reactiveVal(1)
output$page_content <- renderUI({
current_page <- page()
if (current_page == 1) {
tagList(
h3("Welcome to the 'Guess the City' study!"),
p("The goal of this study is to explore how artificial intelligence (AI) and humans can work together effectively. To do this, we’ll show you 10 images of random locations from one of four cities: Berlin, Hamburg, Jerusalem, and Tel Aviv. Each image is a Google Maps photo from one of these cities."),
h4("Here’s what you’ll do:"),
tags$ol(
tags$li(strong("City Classification:"), " Look at each image carefully and decide which of the four cities you think it shows. Our AI model has already made its own prediction, which we will share with you. Keep in mind that AI models can make mistakes, so the AI's choice may not always be correct."),
tags$li(strong("Marking Important Areas:"), " After seeing the AI's prediction, you’ll also get a heat map highlighting which parts of the image influenced the AI's decision. Darker areas on the map indicate features that were more important to the AI. Your task is to mark the areas that are most important for your own decision. If you agree with the AI, you can mark similar areas, or you can mark completely different areas based on your perspective.")
),
p("To proceed with the study, it’s essential that you complete both the classification and the marking tasks for each image."),
h4("Bonus Opportunity:"),
p("You can earn an additional payment by providing precise markings and achieving at least 90% correct classifications. This bonus will be an extra x cents."),
p("Thank you for your participation!"),
div(style = "text-align: center; margin-top: 20px;",
actionButton("next_page", "Start Annotating", icon = icon("arrow-right"), class = "btn-primary")
)
)
} else if (current_page >= 2 && current_page <= 11) {
i <- current_page - 1
class_number <- extract_class_from_filename(selected_images[i])
image <- image_read(selected_images[i])
tagList(
h4("AI Prediction: ", class_number),
p("Do you agree? Choose the city and highlight the area most important for your decision."),
div(class = "select-input",
selectInput(paste0("class_", i), "City Selection:",
choices = c("", "Tel Aviv", "Jerusalem", "Hamburg", "Berlin"))
),
plotOutput(paste0("imagePlot", i), click = paste0("image_click_", i), height = "500px"),
div(style = "display: flex; gap: 10px; justify-content: center;",
actionButton(paste0("clear_", i), "Clear Annotations", icon = icon("trash"), class = "btn-secondary"),
actionButton(paste0("end_polygon_", i), "Complete Polygon", icon = icon("check"), class = "btn-secondary"),
actionButton("next_page", "Next Image", icon = icon("arrow-right"), class = "btn-primary")
)
)
} else {
tagList(
h3("Thank you for completing the annotations!"),
p("All annotated images and coordinates have been saved to Nextcloud."),
actionButton("close_app", "Close", class = "btn-primary", style = "margin-top: 20px;")
)
}
})
observeEvent(page(), {
lapply(1:10, function(i) {
observeEvent(input[[paste0("image_click_", i)]], {
current_coords <- coords()
polygon_id_val <- polygon_id()
current_coords <- add_row(
current_coords,
x = input[[paste0("image_click_", i)]]$x,
y = input[[paste0("image_click_", i)]]$y,
polygon_id = polygon_id_val,
name = paste("polygon", i)
)
coords(current_coords)
})
output[[paste0("imagePlot", i)]] <- renderPlot({
img <- image_read(selected_images[i])
img_raster <- as.raster(img)
plot(img_raster)
all_polygons <- coords() %>% filter(name == paste("polygon", i))
unique_polygons <- unique(all_polygons$polygon_id)
for (poly_id in unique_polygons) {
polygon_coords <- all_polygons %>% filter(polygon_id == poly_id)
if (nrow(polygon_coords) > 2) {
polygon(polygon_coords$x, polygon_coords$y, border = "blue", col = rgb(0, 0, 1, alpha = 0.2))
}
}
})
observeEvent(input[[paste0("clear_", i)]], {
coords(coords() %>% filter(name != paste("polygon", i)))
})
observeEvent(input[[paste0("end_polygon_", i)]], {
polygon_id(polygon_id() + 1)
})
})
})
observeEvent(input$next_page, {
current_page <- page()
if (current_page >= 2 && current_page <= 11) {
i <- current_page - 1
selected_class <- input[[paste0("class_", i)]]
input_filename <- tools::file_path_sans_ext(basename(selected_images[i]))
class_AI <- extract_class_from_filename(selected_images[i])
annotation_missing <- selected_class == ""
polygon_coords <- coords() %>% filter(name == paste("polygon", i))
polygon_missing <- nrow(polygon_coords) < 3
if (annotation_missing && polygon_missing) {
showModal(modalDialog(
title = "Annotation Required",
"Please select a city from the dropdown menu and highlight a region in the picture before proceeding to the next page.",
easyClose = TRUE
))
} else if (annotation_missing) {
showModal(modalDialog(
title = "Dropdown Selection Required",
"Please select a city from the dropdown menu before proceeding to the next page.",
easyClose = TRUE
))
} else if (polygon_missing) {
showModal(modalDialog(
title = "Image Annotation Required",
"Please highlight a region in the picture before proceeding to the next page.",
easyClose = TRUE
))
} else {
# Show progress bar while saving
showModal(modalDialog(
title = "Saving, please wait...",
progressBar(id = "save_progress", value = 0, display_pct = TRUE),
footer = NULL,
easyClose = FALSE
))
# Simulate saving process
for (progress in seq(0, 100, by = 20)) {
Sys.sleep(0.2)
updateProgressBar(session, id = "save_progress", value = progress)
}
annotated_img_name <- paste0("annotated_", input_filename, "_", selected_class, ".jpg")
annotation_csv_name <- paste0("annotated_", input_filename, "_", selected_class, ".csv")
img <- image_read(selected_images[i])
img_height <- image_info(img)$height
annotation_data <- polygon_coords %>%
select(-name) %>%
mutate(
x = x,
y = img_height - y,
image_id = i,
class_selected = selected_class,
class_AI = class_AI
)
temp_csv <- tempfile(fileext = ".csv")
write_csv(annotation_data, path = temp_csv)
saveData(temp_csv, annotation_csv_name, csv_cloud_folder, username, password)
unlink(temp_csv)  # Deletes the temporary CSV file after saving
closeAllConnections()  # Closes all open connections
# Draw and save image with polygons
img_with_polygon <- image_draw(img)
unique_polygons <- unique(polygon_coords$polygon_id)
for (poly_id in unique_polygons) {
poly_coords <- polygon_coords %>% filter(polygon_id == poly_id)
polygon(poly_coords$x, img_height - poly_coords$y, border = "blue", col = rgb(0, 0, 1, alpha = 0.2))
}
dev.off()
temp_img <- tempfile(fileext = ".jpg")
image_write(img_with_polygon, path = temp_img)
saveData(temp_img, annotated_img_name, img_cloud_folder, username, password)
unlink(temp_img)  # Deletes the temporary image file after saving
closeAllConnections()  # Closes all open connections
removeModal()  # Hides modal after saving
page(current_page + 1)
}
} else {
page(current_page + 1)
}
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
