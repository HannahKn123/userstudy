progressBar(id = "save_progress", value = 0, display_pct = TRUE),
footer = NULL,
easyClose = FALSE
))
for (progress in seq(0, 100, by = 20)) {
Sys.sleep(0.2)
updateProgressBar(session, id = "save_progress", value = progress)
}
# Save annotation details here (image and CSV saving)
removeModal()
page(current_page + 1)
}
} else {
page(current_page + 1)
}
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
setwd("~/#Institut of Business Analytics/user_study/userstudy")
runApp()
install.packages("shinyjs")
shiny::runApp()
runApp()
installed.packages()["shinyjs", ]
runApp()
runApp()
install.packages("tibble")
library(tibble)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/#Institut of Business Analytics/user_study/userstudy")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Construct Nextcloud URL (example structure; adjust as necessary)
url <- paste0("https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/", cloud_folder, "/", file_name)
runApp()
# Run a test upload in the console with a sample file path
save_to_nextcloud("C:/path/to/test_file.csv", "annotation_result", "test_upload.csv", "zbc57", "IBA2024Nein#")
# Construct Nextcloud URL (example structure)
url <- paste0("https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/", cloud_folder, "/", URLencode(file_name))
# Print file path and URL for debugging
print(paste("Local file path:", file_path))
# Adjusted save_to_nextcloud function for testing
save_to_nextcloud <- function(file_path, cloud_folder, file_name, username, password) {
# Print file path and URL for debugging
print(paste("Local file path:", file_path))
print(paste("File name:", file_name))
# Construct Nextcloud URL (example structure)
url <- paste0("https://cloudstore.uni-ulm.de/remote.php/dav/files/zbc57/annotation_result/", cloud_folder, "/", URLencode(file_name))
print(paste("Nextcloud URL:", url))
# Perform the PUT request with httr for testing
result <- httr::PUT(
url,
httr::authenticate(username, password),
body = httr::upload_file(file_path)
)
# Check for successful status
if (httr::status_code(result) == 201) {
print("File uploaded successfully.")
} else {
print(httr::content(result))
}
}
print(httr::content(result))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='ibaulmuniversity',
token='7F5EE8B920E5B311B3229787C990EB18',
secret='lRHViTL78Xge4Ji7PY+uc+3G+c8JHY3SD9Dj4+el')
rsconnect::setAccountInfo(name='ibaulmuniversity',
token='7F5EE8B920E5B311B3229787C990EB18',
secret='lRHViTL78Xge4Ji7PY+uc+3G+c8JHY3SD9Dj4+el')
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='ibaulmuniversity',
token='7F5EE8B920E5B311B3229787C990EB18',
secret='lRHViTL78Xge4Ji7PY+uc+3G+c8JHY3SD9Dj4+el')
rsconnect::deployApp(appName = "userstudy")
shiny::runApp()
rsconnect::deployApp(appName = "userstudy")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
