threshold_row <- dim(dat_19)[1]*0.5
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.2
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.2
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.1
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.5
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.5
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.3
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.1
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19_clean_col <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19_clean_col)
threshold_row <- dim(dat_19)[1]*0.1
dat_19_clean_row <- dat_19_clean_col[rowSums(is.na(dat_19_clean_col)) <= threshold_row,]
dim(dat_19_clean_row)
head(dat_19_clean_row)
skim(dat_19_clean_row)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.1
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
dim(dat_19)
head(dat_19)
skim(dat_19)
dat_19 = dat %>% filter(YEAR==2019)
head(dat_19)
dim(dat_19)
skim(dat_19)
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.1
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
threshold_col <- dim(dat_19)[2]*0.1
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
dim(dat_19)
head(dat_19)
skim(dat_19)
dat_19 = dat %>% filter(YEAR==2019)
head(dat_19)
dim(dat_19)
skim(dat_19)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.1
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
dim(dat_19)
head(dat_19)
skim(dat_19)
replace_na_with_mean <- function(x) {
mean_value <- mean(x, na.rm = TRUE)
x[is.na(x)] <- mean_value
return(x)
}
# Apply the function to each column in the data frame
dat_19 <- as.data.frame(lapply(dat_19, replace_na_with_mean))
replace_na_with_mean <- function(x) {
mean_value <- mean(x, na.rm = TRUE)
x[is.na(x)] <- mean_value
return(x)
}
# Apply the function to each column in the data frame
dat_19 <- as.data.frame(lapply(dat_19, replace_na_with_mean))
replace_na_with_mean <- function(x) {
mean_value <- mean(x, na.rm = TRUE)
x[is.na(x)] <- mean_value
return(x)
}
# Apply the function to each column in the data frame
dat_19 <- as.data.frame(lapply(dat_19, replace_na_with_mean))
dat_19 <- dat_19 %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
dat_19 <- dat_19 %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
head(dat_19)
skim(dat_19)
library(skimr)
library(dplyr)
dat = read.csv("C:/Users/hanna/OneDrive/Dokumente/#Master/#5 Semester/#Machine Learning and decision making/Project_data.csv")
head(dat)
dim(dat)
skim(dat)
dat_19 = dat %>% filter(YEAR==2019)
head(dat_19)
dim(dat_19)
skim(dat_19)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.1
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
dim(dat_19)
head(dat_19)
skim(dat_19)
dat_19 <- dat_19 %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
head(dat_19)
skim(dat_19)
dat_19 <- dat_19 %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
head(dat_19)
skim(dat_19)
dim(dat)
dat_19 <- dat_19 %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
head(dat_19)
skim(dat_19)
dim(dat)
ols = lm(EN.ATM.GHGT.ZG ~., data=dat_19)
dim(dat_19)
ols = lm( dat_19$EN.ATM.GHGT.ZG ~., data = dat_19)
dat_19$EN.ATM.GHGT.ZG
dat$EN.ATM.GHGT.ZG
dat$EN.ATM.GHGT.ZG
dat_19$EN.ATM.GHGT.ZG
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.1
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
dim(dat_19)
head(dat_19)
skim(dat_19)
dat_19$EN.ATM.GHGT.ZG
dat_19$EN.ATM.GHGT.ZG
dat_19 = dat %>% filter(YEAR==2019)
head(dat_19)
dim(dat_19)
skim(dat_19)
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.2
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.2
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
dim(dat_19)
head(dat_19)
skim(dat_19)
dat_19$EN.ATM.GHGT.ZG
dat_19$EN.ATM.GHGT.ZG
dat_19 = dat %>% filter(YEAR==2019)
head(dat_19)
dim(dat_19)
skim(dat_19)
dat_19 = dat %>% filter(YEAR==2019)
dim(dat_19)
dat_19 <- dat_19 %>%
filter(!is.na(EN.ATM.GHGT.ZG))
skim(dat_19)
dat_19 = dat %>% filter(YEAR==2019)
dim(dat_19)
dim(dat_19)
dat_19 <- dat_19 %>%
filter(!is.na(EN.ATM.GHGT.ZG))
skim(dat_19)
dim(dat_19)
dat_19 <- dat_19 %>%
filter(!is.na(EN.ATM.GHGT.ZG))
skim(dat_19)
dim(dat_19)
dat_19 = dat %>% filter(YEAR==2019)
dim(dat_19)
dim(dat_19)
dat_19 <- dat_19 %>%
filter(!is.na(EN.ATM.GHGT.KT.CE))
skim(dat_19)
dim(dat_19)
dim(dat_19)
dat_19 <- dat_19 %>%
filter(!is.na(EN.ATM.GHGT.KT.CE))
dim(dat_19)
dat_19 = dat %>% filter(YEAR==2019)
dim(dat_19)
dim(dat_19)
dat_19 <- dat_19 %>%
filter(!is.na(EN.ATM.GHGT.KT.CE))
dim(dat_19)
threshold_col <- dim(dat_19)[2]*0.1
dat_19 <- dat_19[, colSums(is.na(dat_19)) <= threshold_col]
dim(dat_19)
threshold_row <- dim(dat_19)[1]*0.1
dat_19 <- dat_19[rowSums(is.na(dat_19)) <= threshold_row,]
dim(dat_19)
head(dat_19)
skim(dat_19)
dat_19 <- dat_19 %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
head(dat_19)
skim(dat_19)
dim(dat_19)
ols = lm(EN.ATM.GHGT.KT.CE ~., data = dat_19)
summary(ols)
ols = lm(EN.ATM.GHGT.KT.CE ~ population, data = dat_19)
summary(ols)
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[EN.ATM.GHGT.KT.CE]]
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
lasso_model <- cv.glmnet(X, y, alpha = 1)
library(glmnet)
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Bestimmen des optimalen Lambda-Werts
best_lambda <- lasso_model$lambda.min
# Anpassen des Lasso-Modells mit dem besten Lambda-Wert
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Wichtigste Prädiktoren anzeigen
lasso_coef <- coef(lasso_best)
important_predictors <- lasso_coef[lasso_coef != 0, ]
library(glmnet)
library(dplyr)
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Bestimmen des optimalen Lambda-Werts
best_lambda <- lasso_model$lambda.min
# Anpassen des Lasso-Modells mit dem besten Lambda-Wert
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Wichtigste Prädiktoren anzeigen
lasso_coef <- coef(lasso_best)
important_predictors <- lasso_coef[lasso_coef != 0, ]
library(glmnet)
library(dplyr)
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
X <- apply(X, 2, function(x) { x[is.na(x)] <- mean(x, na.rm = TRUE); x })
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Bestimmen des optimalen Lambda-Werts
best_lambda <- lasso_model$lambda.min
# Anpassen des Lasso-Modells mit dem besten Lambda-Wert
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Wichtigste Prädiktoren anzeigen
lasso_coef <- coef(lasso_best)
important_predictors <- lasso_coef[lasso_coef != 0, ]
library(glmnet)
library(dplyr)
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
X <- apply(X, 2, function(x) { x[is.na(x)] <- mean(x, na.rm = TRUE); x })
X <- as.matrix(X)
y <- as.matrix(y)
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Bestimmen des optimalen Lambda-Werts
best_lambda <- lasso_model$lambda.min
# Anpassen des Lasso-Modells mit dem besten Lambda-Wert
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Wichtigste Prädiktoren anzeigen
lasso_coef <- coef(lasso_best)
important_predictors <- lasso_coef[lasso_coef != 0, ]
library(glmnet)
library(dplyr)
target_variable <- "EN.ATM.GHGT.KT.CE"
X <- dat_19 %>% select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>% as.matrix()
y <- dat_19[[target_variable]]
X <- apply(X, 2, function(x) { x[is.na(x)] <- mean(x, na.rm = TRUE); x })
X <- as.matrix(X)
y <- as.matrix(y)
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Bestimmen des optimalen Lambda-Werts
best_lambda <- lasso_model$lambda.min
# Anpassen des Lasso-Modells mit dem besten Lambda-Wert
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Wichtigste Prädiktoren anzeigen
lasso_coef <- coef(lasso_best)
important_predictors <- lasso_coef[lasso_coef != 0, ]
library(glmnet)
library(dplyr)
# Define the target variable
target_variable <- "EN.ATM.GHGT.KT.CE"
# Prepare the feature matrix X and target vector y
X <- dat_19 %>%
select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>%
as.matrix()
y <- dat_19[[target_variable]]
# Handle missing values by replacing NAs with the column mean
X <- apply(X, 2, function(x) { x[is.na(x)] <- mean(x, na.rm = TRUE); x })
# Convert y to a matrix (although glmnet can handle vectors)
y <- as.matrix(y)
# Fit a LASSO model with cross-validation to find the best lambda
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Determine the optimal lambda value
best_lambda <- lasso_model$lambda.min
# Fit the LASSO model with the best lambda value
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Extract the coefficients of the fitted model
lasso_coef <- coef(lasso_best)
# Identify and display the important predictors (non-zero coefficients)
important_predictors <- lasso_coef[lasso_coef != 0, , drop = FALSE]
library(glmnet)
library(dplyr)
# Define the target variable
target_variable <- "EN.ATM.GHGT.KT.CE"
# Prepare the feature matrix X and target vector y
X <- dat_19 %>%
select(-c(Code, Country.1, YEAR, EN.ATM.GHGT.KT.CE)) %>%
as.matrix()
y <- dat_19[[target_variable]]
# Handle missing values by replacing NAs with the column mean
X <- apply(X, 2, function(x) { x[is.na(x)] <- mean(x, na.rm = TRUE); x })
# Convert y to a matrix (although glmnet can handle vectors)
y <- as.matrix(y)
# Fit a LASSO model with cross-validation to find the best lambda
lasso_model <- cv.glmnet(X, y, alpha = 1)
# Determine the optimal lambda value
best_lambda <- lasso_model$lambda.min
# Fit the LASSO model with the best lambda value
lasso_best <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Extract the coefficients of the fitted model
lasso_coef <- coef(lasso_best)
# Convert the sparse matrix to a regular matrix
lasso_coef_matrix <- as.matrix(lasso_coef)
# Identify and display the important predictors (non-zero coefficients)
important_predictors <- lasso_coef_matrix[lasso_coef_matrix != 0, , drop = FALSE]
print("Wichtige Prädiktoren:")
print(important_predictors)
library(shiny)
library(magick)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
titlePanel("Image Marker"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose Image File",
accept = c('image/png', 'image/jpeg')),
actionButton("save", "Save Image with Marking")
),
mainPanel(
plotOutput("imagePlot", brush = brushOpts(id = "image_brush")),
h4("Selected Area"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output, session) {
image <- reactiveVal()
observeEvent(input$file1, {
img <- image_read(input$file1$datapath)
image(img)
})
output$imagePlot <- renderPlot({
req(image())
plot(as.raster(image()))
})
output$info <- renderPrint({
req(input$image_brush)
input$image_brush
})
observeEvent(input$save, {
req(image(), input$image_brush)
brush <- input$image_brush
# Get brush coordinates and draw a rectangle on the image
img <- image()
marked_img <- image_draw(img)
rect(brush$xmin, brush$ymin, brush$xmax, brush$ymax, border = "red", lwd = 3)
dev.off()  # Save the marked image
# Save the image
image_write(marked_img, path = "marked_image.png")
showNotification("Image saved as marked_image.png", type = "message")
})
}
shinyApp(ui, server)
shiny::runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
shiny::runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
shiny::runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
shiny::runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
runApp('#Institut of Business Analytics/user_study/userstudy')
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='ibaulmuniversity',
token='7F5EE8B920E5B311B3229787C990EB18',
secret='lRHViTL78Xge4Ji7PY+uc+3G+c8JHY3SD9Dj4+el')
rsconnect::deployApp(appName = "study_v1")
setwd("~/#Institut of Business Analytics/user_study/userstudy")
rsconnect::deployApp(appName = "study_v1")
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
runApp('userstudy_deploy')
